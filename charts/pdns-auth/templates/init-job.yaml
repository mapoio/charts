{{- if .Values.database.init.enabled -}}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "pdns-auth.fullname" . }}-init
  labels:
    {{- include "pdns-auth.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "0"
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  backoffLimit: 5
  template:
    metadata:
      labels:
        {{- include "pdns-auth.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: init
    spec:
      restartPolicy: OnFailure
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "pdns-auth.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: init
          # 使用包含所有数据库客户端工具的镜像
          image: "{{ .Values.initJob.image.repository }}:{{ .Values.initJob.image.tag }}"
          imagePullPolicy: {{ .Values.initJob.image.pullPolicy }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          command:
            - /bin/sh
            - -c
            - |
              set -e
              
              # Create Flyway directories in a writable location
              mkdir -p /tmp/flyway/sql
              

              
              # Copy schema files to Flyway format based on database type
              {{- if eq .Values.database.type "mysql" }}
              cp /configmap/mysql-schema.sql /tmp/flyway/sql/V1__init.sql
              {{- else if eq .Values.database.type "pgsql" }}
              cp /configmap/pgsql-schema.sql /tmp/flyway/sql/V1__init.sql
              {{- else if eq .Values.database.type "sqlite3" }}
              cp /configmap/sqlite3-schema.sql /tmp/flyway/sql/V1__init.sql
              {{- end }}
              
              # Initialize database using Flyway
              {{- if eq .Values.database.type "mysql" }}
              echo "Initializing MySQL database with Flyway..."
              
              # Set Flyway environment variables
              export FLYWAY_URL="jdbc:mysql://{{ .Values.database.mysql.host }}:{{ .Values.database.mysql.port }}/{{ .Values.database.mysql.database }}"
              export FLYWAY_USER="{{ .Values.database.mysql.user }}"
              export FLYWAY_PASSWORD="{{ .Values.database.mysql.password }}"
              
              # Wait for MySQL to be ready
              echo "Waiting for MySQL to be ready..."
              until flyway info -url="$FLYWAY_URL" -user="$FLYWAY_USER" -password="$FLYWAY_PASSWORD" >/dev/null 2>&1; do
                echo "MySQL is unavailable - sleeping"
                sleep 3
              done
              
              # Run Flyway migration
              if [ "{{ .Values.database.init.skipInit }}" != "true" ]; then
                echo "Running Flyway migration..."
                flyway migrate -url="$FLYWAY_URL" -user="$FLYWAY_USER" -password="$FLYWAY_PASSWORD" -locations="filesystem:/tmp/flyway/sql"
              else
                echo "Skipping database initialization..."
              fi
              {{- else if eq .Values.database.type "pgsql" }}
              echo "Initializing PostgreSQL database with Flyway..."
              
              # Set Flyway environment variables
              export FLYWAY_URL="jdbc:postgresql://{{ .Values.database.pgsql.host }}:{{ .Values.database.pgsql.port }}/{{ .Values.database.pgsql.database }}"
              export FLYWAY_USER="{{ .Values.database.pgsql.user }}"
              export FLYWAY_PASSWORD="{{ .Values.database.pgsql.password }}"
              
              # Wait for PostgreSQL to be ready
              echo "Waiting for PostgreSQL to be ready..."
              until flyway info -url="$FLYWAY_URL" -user="$FLYWAY_USER" -password="$FLYWAY_PASSWORD" >/dev/null 2>&1; do
                echo "PostgreSQL is unavailable - sleeping"
                sleep 3
              done
              
              # Run Flyway migration
              if [ "{{ .Values.database.init.skipInit }}" != "true" ]; then
                echo "Running Flyway migration..."
                flyway migrate -url="$FLYWAY_URL" -user="$FLYWAY_USER" -password="$FLYWAY_PASSWORD" -locations="filesystem:/tmp/flyway/sql"
              else
                echo "Skipping database initialization..."
              fi
              {{- else if eq .Values.database.type "sqlite3" }}
              echo "Initializing SQLite3 database..."
              
              # Install SQLite3 client
              apk add --no-cache sqlite
              
              # Set environment variables
              SQLITE_DB="{{ .Values.database.sqlite3.database }}"
              
              # Create directory if it doesn't exist
              mkdir -p $(dirname "$SQLITE_DB")
              
              # Initialize schema if needed
              if [ "{{ .Values.database.init.skipInit }}" != "true" ]; then
                if [ ! -f "$SQLITE_DB" ] || [ ! -s "$SQLITE_DB" ]; then
                  echo "SQLite3 database doesn't exist or is empty, initializing schema..."
                  sqlite3 "$SQLITE_DB" < /tmp/flyway/sql/V1__init.sql
                else
                  echo "SQLite3 database already exists, checking if it has tables..."
                  SQLITE_TABLE_COUNT=$(sqlite3 "$SQLITE_DB" "SELECT count(name) FROM sqlite_master WHERE type='table';")
                  if [ "$SQLITE_TABLE_COUNT" -eq 0 ]; then
                    echo "SQLite3 database has no tables, initializing schema..."
                    sqlite3 "$SQLITE_DB" < /tmp/flyway/sql/V1__init.sql
                  else
                    echo "SQLite3 database already has tables, skipping initialization..."
                  fi
                fi
              fi
              {{- end }}
              
              echo "Database initialization completed successfully."
          volumeMounts:
            - name: config
              mountPath: /configmap
            {{- if eq .Values.database.type "sqlite3" }}
            - name: data
              mountPath: {{ dir .Values.database.sqlite3.database }}
            {{- end }}
          env:
            {{- if eq .Values.database.type "mysql" }}
            - name: PDNS_gmysql_host
              value: {{ .Values.database.mysql.host | quote }}
            - name: PDNS_gmysql_port
              value: {{ .Values.database.mysql.port | quote }}
            - name: PDNS_gmysql_user
              value: {{ .Values.database.mysql.user | quote }}
            - name: PDNS_gmysql_password
              valueFrom:
                secretKeyRef:
                  name: {{ include "pdns-auth.fullname" . }}
                  key: PDNS_gmysql_password
            - name: PDNS_gmysql_dbname
              value: {{ .Values.database.mysql.database | quote }}
            {{- else if eq .Values.database.type "pgsql" }}
            - name: PDNS_gpgsql_host
              value: {{ .Values.database.pgsql.host | quote }}
            - name: PDNS_gpgsql_port
              value: {{ .Values.database.pgsql.port | quote }}
            - name: PDNS_gpgsql_user
              value: {{ .Values.database.pgsql.user | quote }}
            - name: PDNS_gpgsql_password
              valueFrom:
                secretKeyRef:
                  name: {{ include "pdns-auth.fullname" . }}
                  key: PDNS_gpgsql_password
            - name: PDNS_gpgsql_dbname
              value: {{ .Values.database.pgsql.database | quote }}
            {{- else if eq .Values.database.type "sqlite3" }}
            - name: PDNS_gsqlite3_database
              value: {{ .Values.database.sqlite3.database | quote }}
            {{- end }}
      volumes:
        - name: config
          configMap:
            name: {{ include "pdns-auth.fullname" . }}-config
        {{- if eq .Values.database.type "sqlite3" }}
        - name: data
          persistentVolumeClaim:
            claimName: {{ include "pdns-auth.fullname" . }}
        {{- end }}
{{- end }} 